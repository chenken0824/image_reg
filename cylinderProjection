function imgD = cylinderProjection(img, degree)
[h,w,rgb]=size(img);
f=w/(2*tan(degree/2));
%use forward transform to obtain new_h and new_w
new=[];
for i=1:w
    for j=1:h
        new(i,1)=floor(f*atan((i-w/2)/f)+f*atan(w/(2*f)));
        new(i,2)=floor(f*(j-h/2)/sqrt((i-w/2)^2+f^2)+h/2);
    end
end
new_w=max(new(:,1));
new_h=max(new(:,2));
%new_h=h;
%new_w=floor(f*atan((w-w/2)/f)+f*atan(w/(2*f)));
imgD=zeros(new_h,new_w,rgb);
for i=1:new_h
    for j=1:new_w
        x=f*tan(j/f-atan(w/(2*f)))+w/2;
        y=(i-h/2)*sqrt((x-w/2)^2+f^2)/f+h/2;
        x_f=floor(x);
        y_f=floor(y);
%use bilinear interpolation to obtain the projection result
        if x_f>=1&&x_f<=w-1&&y_f>=1 && y_f<=h-1
            u=x-x_f;
            v=y-y_f;
            x_c=x_f+1;
            y_c=y_f+1;
            imgD(i,j,1)=(1-u)*(1-v)*img(y_f,x_f,1)+(1-v)*u*img(y_f,x_c,1)+v*(1-u)*img(y_c,x_f,1)+u*v*img(y_c,x_c,1);
            imgD(i,j,2)=(1-u)*(1-v)*img(y_f,x_f,2)+(1-v)*u*img(y_f,x_c,2)+v*(1-u)*img(y_c,x_f,2)+u*v*img(y_c,x_c,2);
            imgD(i,j,3)=(1-u)*(1-v)*img(y_f,x_f,3)+(1-v)*u*img(y_f,x_c,3)+v*(1-u)*img(y_c,x_f,3)+u*v*img(y_c,x_c,3);
        end
    end
end 
imgD=uint8(imgD);
end
